diff --git a/src/components/form/Checkbox.tsx b/src/components/form/Checkbox.tsx
index 3c993e6..581f3c7 100644
--- a/src/components/form/Checkbox.tsx
+++ b/src/components/form/Checkbox.tsx
@@ -5,9 +5,7 @@ import { useForm } from "react-hook-form";
 import { z } from "zod";
 
 import { Button } from "@/components/ui/button";
-import {
-  Form,
-} from "@/components/ui/form";
+import { Form } from "@/components/ui/form";
 
 import { toast } from "@/components/ui/use-toast";
 import Typography from "@/components/ui/typography";
@@ -29,8 +27,8 @@ export function CheckboxReactHookFormMultiple({
   events,
   items,
   notificationSubscription,
-
 }: CheckboxReactHookFormMultipleProps) {
+  const notASubscription = "00000000-0000-0000-0000-000000000000";
   const FormSchema = z.object({
     user_id: z.string().uuid(),
     repo_name: z.string(),
@@ -50,36 +48,69 @@ export function CheckboxReactHookFormMultiple({
 
   async function onSubmit(data: z.infer<typeof FormSchema>) {
     try {
-      if (events.length > 0) {
+      if (!(notificationSubscription == notASubscription)) {
         const dataTransformed: NotificationEdit = {
           notificationSubscription,
           user_id: data.user_id,
           repo_name: data.repo_name,
           events: {
-            added: data.items.filter((item) => !events.some((event) => event.event_name === item)),
-            removed: events.filter((event) => !data.items.includes(event.event_name)).map((event) => event.event_name),
+            added: data.items.filter(
+              (item) => !events.some((event) => event.event_name === item)
+            ),
+            removed: events
+              .filter((event) => !data.items.includes(event.event_name))
+              .map((event) => event.event_name),
           },
         };
-        await updateSubscription(dataTransformed);
+        const res = await updateSubscription(dataTransformed);
+        if (!res.ok) {
+          toast({
+            variant: "destructive",
+            title: "Error",
+            description: (
+              <Typography variant="p">
+                Failed to process subscription. Please try again.
+              </Typography>
+            ),
+          });
+        } else {
+          toast({
+            title: "Success",
+            description: (
+              <Typography variant="p">
+                Subscription has been successfully processed.
+              </Typography>
+            ),
+          });
+        }
       } else {
         const dataTransformed: NotificationProps = {
           user_id: data.user_id,
           repo_name: data.repo_name,
           events: data.items,
         };
-        await createSubscription(dataTransformed);
+        const res = await createSubscription(dataTransformed);
+        if (!res.ok) {
+          toast({
+            variant: "destructive",
+            title: "Error",
+            description: (
+              <Typography variant="p">
+                Failed to process subscription. Please try again.
+              </Typography>
+            ),
+          });
+        } else {
+          toast({
+            title: "Success",
+            description: (
+              <Typography variant="p">
+                Subscription has been successfully processed.
+              </Typography>
+            ),
+          });
+        }
       }
-
-      toast({
-        description: (
-          <div>
-            <Typography variant="p">
-              {data.items.length} items selected.
-            </Typography>
-            <Typography variant="p">{data.items.join(", ")}</Typography>
-          </div>
-        ),
-      });
     } catch (error) {
       console.error(error);
       toast({
@@ -94,7 +125,6 @@ export function CheckboxReactHookFormMultiple({
     }
   }
 
-
   return (
     <Form {...form}>
       <form
@@ -111,5 +141,3 @@ export function CheckboxReactHookFormMultiple({
     </Form>
   );
 }
-
-
diff --git a/src/components/form/CheckboxReactHookFormMultiple.tsx b/src/components/form/CheckboxReactHookFormMultiple.tsx
new file mode 100644
index 0000000..08e31a2
--- /dev/null
+++ b/src/components/form/CheckboxReactHookFormMultiple.tsx
@@ -0,0 +1,114 @@
+"use client";
+import { zodResolver } from "@hookform/resolvers/zod";
+import { useForm } from "react-hook-form";
+import { z } from "zod";
+import { Button } from "@/components/ui/button";
+import { Form } from "@/components/ui/form";
+import { toast } from "@/components/ui/use-toast";
+import Typography from "@/components/ui/typography";
+import { NotificationEdit, NotificationProps } from "@/types";
+import { EventSelectionField } from "./EventSelectionField";
+import { updateSubscription, createSubscription } from "@/lib/api";
+import { CheckboxReactHookFormMultipleProps } from "./Checkbox";
+
+export function CheckboxReactHookFormMultiple({
+  user_id,
+  repo_name,
+  events,
+  items,
+  notificationSubscription,
+}: CheckboxReactHookFormMultipleProps) {
+  const notASubscription = "00000000-0000-0000-0000-000000000000";
+  const FormSchema = z.object({
+    user_id: z.string().uuid(),
+    repo_name: z.string(),
+    items: z.array(z.string()).refine((value) => value.some((item) => item), {
+      message: "You have to select at least one item.",
+    }),
+  });
+
+  const form = useForm<z.infer<typeof FormSchema>>({
+    resolver: zodResolver(FormSchema),
+    defaultValues: {
+      user_id,
+      repo_name,
+      items: events ? events.map((event) => event.event_name) : [],
+    },
+  });
+
+  async function onSubmit(data: z.infer<typeof FormSchema>) {
+    try {
+      if (!(notificationSubscription == notASubscription)) {
+        const dataTransformed: NotificationEdit = {
+          notificationSubscription,
+          user_id: data.user_id,
+          repo_name: data.repo_name,
+          events: {
+            added: data.items.filter(
+              (item) => !events.some((event) => event.event_name === item)
+            ),
+            removed: events
+              .filter((event) => !data.items.includes(event.event_name))
+              .map((event) => event.event_name),
+          },
+        };
+        await updateSubscription(dataTransformed);
+      } else {
+        const dataTransformed: NotificationProps = {
+          user_id: data.user_id,
+          repo_name: data.repo_name,
+          events: data.items,
+        };
+        const res = await createSubscription(dataTransformed);
+        console.log(!res.ok);
+        if (!res.ok) {
+          toast({
+            variant: "destructive",
+            title: "Error",
+            description: (
+              <Typography variant="p">
+                Failed to process subscription. Please try again.
+              </Typography>
+            ),
+          });
+        } else {
+          toast({
+            title: "Success",
+            description: (
+              <Typography variant="p">
+                Subscription has been successfully processed.
+              </Typography>
+            ),
+          });
+        }
+      }
+    } catch (error) {
+      console.error(error);
+      toast({
+        variant: "destructive",
+        title: "Error",
+        description: (
+          <Typography variant="p">
+            Failed to process subscription. Please try again.
+          </Typography>
+        ),
+      });
+    }
+  }
+
+  return (
+    <Form {...form}>
+      <form
+        onSubmit={form.handleSubmit(onSubmit)}
+        className="space-y-8 border w-full p-4 rounded-md border-gray-500 "
+      >
+        <EventSelectionField form={form} items={items} />
+        <Button type="submit" size="lg" color="ghost">
+          <Typography variant="p" className="text-black flex">
+            Submit
+          </Typography>
+        </Button>
+      </form>
+    </Form>
+  );
+}
diff --git a/src/components/form/EventSelectionField.tsx b/src/components/form/EventSelectionField.tsx
index bf3b012..2a7d345 100644
--- a/src/components/form/EventSelectionField.tsx
+++ b/src/components/form/EventSelectionField.tsx
@@ -45,15 +45,18 @@ export function EventSelectionField({ form, items }: EventSelectionFieldProps) {
                     >
                       <FormControl>
                         <Checkbox
-                          checked={field.value?.includes(item.id)}
+                          checked={field.value?.includes(item.event_name)}
                           onCheckedChange={(checked) => {
                             return checked
-                              ? field.onChange([...field.value, item.id])
+                              ? field.onChange([
+                                  ...field.value,
+                                  item.event_name,
+                                ])
                               : field.onChange(
-                                field.value?.filter(
-                                  (value) => value !== item.id
-                                )
-                              );
+                                  field.value?.filter(
+                                    (value: string) => value !== item.event_name
+                                  )
+                                );
                           }}
                         />
                       </FormControl>
diff --git a/src/components/form/ServerEventsLoader.tsx b/src/components/form/ServerEventsLoader.tsx
index d851b39..b20fe1f 100644
--- a/src/components/form/ServerEventsLoader.tsx
+++ b/src/components/form/ServerEventsLoader.tsx
@@ -1,7 +1,7 @@
 // components/ServerEventsLoader.tsx
 import { Events } from "@/types";
 import { loadEvents } from "./loadEvents";
-import { CheckboxReactHookFormMultiple } from "./Checkbox";
+import { CheckboxReactHookFormMultiple } from "./CheckboxReactHookFormMultiple";
 import events from "events";
 
 interface ServerEventsLoaderProps {
@@ -15,7 +15,7 @@ export async function ServerEventsLoader({
   user_id,
   repo_name,
   events,
-  notificationSubscription
+  notificationSubscription,
 }: ServerEventsLoaderProps) {
   const items = await loadEvents();
   return (
diff --git a/src/lib/api.ts b/src/lib/api.ts
index 5d88064..3bbcc3a 100644
--- a/src/lib/api.ts
+++ b/src/lib/api.ts
@@ -1,4 +1,10 @@
-import { SubscriptionProps, SubscriptionFormProps, Events, NotificationEdit, NotificationProps } from "@/types";
+import {
+  SubscriptionProps,
+  SubscriptionFormProps,
+  Events,
+  NotificationEdit,
+  NotificationProps,
+} from "@/types";
 
 export const url = "http://localhost:8080/api/v1";
 
@@ -22,7 +28,11 @@ export const getUserRepos = async ({ username }: UsernameProps) => {
   return data as SubscriptionProps[];
 };
 
-export const getSubscriptionByRepo = async ({ reponame }: { reponame: string }) => {
+export const getSubscriptionByRepo = async ({
+  reponame,
+}: {
+  reponame: string;
+}) => {
   const res = await fetch(`${url}/events/${reponame}`, {
     cache: "no-store",
   });
@@ -39,7 +49,7 @@ export const getSubscriptionByRepo = async ({ reponame }: { reponame: string })
   }
 
   return data as SubscriptionFormProps;
-}
+};
 
 export const getAllEvents = async () => {
   const res = await fetch(`${url}/events`);
@@ -47,19 +57,21 @@ export const getAllEvents = async () => {
   return data as Events[];
 };
 
-
 export const createSubscription = async (data: NotificationProps) => {
   const res = await fetch(`${url}/notification`, {
     method: "POST",
     body: JSON.stringify(data),
   });
-  return res
-}
+  return res;
+};
 
 export const updateSubscription = async (data: NotificationEdit) => {
-  const res = await fetch(`${url}/notification/${data.notificationSubscription}`, {
-    method: "PUT",
-    body: JSON.stringify(data),
-  });
-  return res.ok;
-}
\ No newline at end of file
+  const res = await fetch(
+    `${url}/notification/${data.notificationSubscription}`,
+    {
+      method: "PUT",
+      body: JSON.stringify(data),
+    }
+  );
+  return res;
+};
